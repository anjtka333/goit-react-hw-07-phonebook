{"version":3,"sources":["components/ContactList/ContactList.module.scss","redux/contacts/contactsActions.js","redux/contacts/contactsConstants.js","redux/contacts/contactsOperations.js","service/api.js","components/ContactForm/ContactForm.jsx","redux/selectors/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contactsReducers.js","redux/error/errorReducer.js","redux/loader/loaderReduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactsRequest","addContactsSuccess","addContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","putFilter","addContact","contact","dispatch","axios","post","then","catch","err","addContactApi","data","message","getContacts","get","removeContacts","id","delete","removeContactsApi","idFromApi","ContactForm","useDispatch","useState","name","setName","number","setNumber","contacts","useSelector","state","items","nameInputId","v4","phoneInputId","onSubmit","e","preventDefault","some","item","toLowerCase","alert","className","s","container","htmlFor","type","pattern","title","required","value","onChange","currentTarget","input","btn","getFilterFromState","filter","filteredContacts","createSelector","includes","getisLoading","loader","getError","error","ContactList","filtered","ulStyle","map","onClick","Filter","inputStyle","App","isLoading","useEffect","reducerItems","createReducer","payload","_","reducerFilter","reducerContacts","combineReducers","setError","resetError","errorReduccer","loaderReducer","rootReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4441b61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__MmzeA\",\"ulStyle\":\"ContactList_ulStyle__3W_KD\"};","import { FILTER } from \"./contactsConstants\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContactsRequest = createAction(\"contacts/getContactsRequest\");\r\nexport const getContactsSuccess = createAction(\"contacts/getContactsSuccess\");\r\nexport const getContactsError = createAction(\"contacts/getContactsError\");\r\n\r\nexport const addContactsRequest = createAction(\"contacts/addContactsRequest\");\r\nexport const addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\r\nexport const addContactsError = createAction(\"contacts/addContactsError\");\r\n\r\nexport const removeContactsRequest = createAction(\r\n  \"contacts/removeContactsRequest\"\r\n);\r\nexport const removeContactsSuccess = createAction(\r\n  \"contacts/removeContactsSuccess\"\r\n);\r\nexport const removeContactsError = createAction(\"contacts/removeContactsError\");\r\n\r\nexport const putFilter = createAction(FILTER);\r\n","export const FILTER = \"put/filter\";\r\n","import {\r\n  addContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  getContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  removeContactsError,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n} from \"./contactsActions\";\r\nimport {\r\n  addContactApi,\r\n  getContactsApi,\r\n  removeContactsApi,\r\n} from \"../../service/api\";\r\n\r\nexport const addContact = (contact) => (dispatch) => {\r\n  dispatch(addContactsRequest());\r\n\r\n  addContactApi(contact)\r\n    .then((data) => dispatch(addContactsSuccess(data)))\r\n    .catch((err) => dispatch(addContactsError(err.message)));\r\n};\r\n\r\nexport const getContacts = () => (dispatch) => {\r\n  dispatch(getContactsRequest());\r\n\r\n  getContactsApi()\r\n    .then((data) => dispatch(getContactsSuccess(data)))\r\n    .catch((err) => dispatch(getContactsError(err.message)));\r\n};\r\n\r\nexport const removeContacts = (id) => (dispatch) => {\r\n  dispatch(removeContactsRequest());\r\n\r\n  removeContactsApi(id)\r\n    .then((idFromApi) => dispatch(removeContactsSuccess(idFromApi)))\r\n    .catch((err) => dispatch(removeContactsError(err.message)));\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const getContactsApi = () => {\r\n  return axios\r\n    .get(`http://localhost:4040/contacts`)\r\n    .then(({ data }) => {\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n\r\nexport const addContactApi = (contact) => {\r\n  return axios\r\n    .post(`http://localhost:4040/contacts`, contact)\r\n    .then(() => ({ ...contact }))\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n\r\nexport const removeContactsApi = (id) => {\r\n  return axios\r\n    .delete(\"http://localhost:4040/contacts/\" + id)\r\n    .then(() => id)\r\n    .catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport s from \"./ContactForm.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/contactsOperations\";\r\n\r\nconst ContactForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n\r\n  const nameInputId = v4();\r\n  const phoneInputId = v4();\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const handleInputNameChange = (e) => {\r\n    setName(e.currentTarget.value);\r\n  };\r\n\r\n  const handleInputNumberChange = (e) => {\r\n    setNumber(e.currentTarget.value);\r\n  };\r\n\r\n  const addContactsOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      contacts.some((item) => {\r\n        return item.name.toLowerCase() === name.toLowerCase();\r\n      })\r\n    ) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      id: v4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    dispatch(addContact(contact));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addContactsOnSubmit} className={s.container}>\r\n      <label htmlFor={nameInputId}>Name </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={handleInputNameChange}\r\n        id={nameInputId}\r\n        className={s.input}\r\n      />\r\n      <label htmlFor={phoneInputId}>Number </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={handleInputNumberChange}\r\n        id={phoneInputId}\r\n        className={s.input}\r\n      />\r\n      <button className={s.btn} type=\"submit\">\r\n        Add conttact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nexport const getContactsFromState = (state) => state.contacts.items;\r\nexport const getFilterFromState = (state) => state.contacts.filter;\r\nexport const filteredContacts = createSelector(\r\n  [getContactsFromState, getFilterFromState],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\nexport const getisLoading = (state) => state.loader;\r\nexport const getError = (state) => state.error;\r\n","import s from \"./ContactList.module.scss\";\r\nimport { filteredContacts } from \"../../redux/selectors/selectors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeContacts } from \"../../redux/contacts/contactsOperations\";\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n  const filtered = useSelector(filteredContacts);\r\n\r\n  return (\r\n    <ul className={s.ulStyle}>\r\n      {filtered.map((item) => {\r\n        return (\r\n          <li key={item.id}>\r\n            {item.name} {item.number}\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                dispatch(removeContacts(item.id));\r\n              }}\r\n            >\r\n              Del\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { putFilter } from \"../../redux/contacts/contactsActions\";\r\nimport { getFilterFromState } from \"../../redux/selectors/selectors\";\r\n\r\nconst Filter = ({ inputStyle }) => {\r\n  const value = useSelector(getFilterFromState);\r\n  const dispatch = useDispatch();\r\n  const handleFilterChange = (e) => {\r\n    dispatch(putFilter(e.currentTarget.value));\r\n  };\r\n  return (\r\n    <label>\r\n      Find contact by name\r\n      <input\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={handleFilterChange}\r\n        className={inputStyle}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport s from \"./components/ContactForm/ContactForm.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { putFilter } from \"./redux/contacts/contactsActions\";\nimport { getContacts } from \"./redux/contacts/contactsOperations\";\nimport { getError, getisLoading } from \"./redux/selectors/selectors\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getisLoading);\n  const error = useSelector(getError);\n  const handleFilterChange = (e) => {\n    dispatch(putFilter(e.currentTarget.value));\n  };\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {isLoading && <p> is Loading...</p>}\n      <Filter onChange={handleFilterChange} inputStyle={s.input} />\n      {error && <p> {error} </p>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactsSuccess,\r\n  getContactsSuccess,\r\n  putFilter,\r\n  removeContactsSuccess,\r\n} from \"./contactsActions\";\r\n\r\nconst reducerItems = createReducer([], {\r\n  [addContactsSuccess]: (state, { payload }) => {\r\n    return [...state, payload];\r\n  },\r\n\r\n  [removeContactsSuccess]: (state, { payload }) => {\r\n    return state.filter((item) => item.id !== payload);\r\n  },\r\n  [getContactsSuccess]: (_, { payload }) => {\r\n    return payload;\r\n  },\r\n});\r\n\r\nconst reducerFilter = createReducer(\"\", {\r\n  [putFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport const reducerContacts = combineReducers({\r\n  items: reducerItems,\r\n  filter: reducerFilter,\r\n});\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactsError,\r\n  addContactsRequest,\r\n  getContactsError,\r\n  getContactsRequest,\r\n  removeContactsError,\r\n  removeContactsRequest,\r\n} from \"../contacts/contactsActions\";\r\n\r\nconst setError = (_, { payload }) => payload;\r\nconst resetError = () => null;\r\n\r\nconst errorReduccer = createReducer(null, {\r\n  [getContactsError]: setError,\r\n  [getContactsRequest]: resetError,\r\n  [addContactsError]: setError,\r\n  [addContactsRequest]: resetError,\r\n  [removeContactsError]: setError,\r\n  [removeContactsRequest]: resetError,\r\n});\r\n\r\nexport default errorReduccer;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  getContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  removeContactsError,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n} from \"../contacts/contactsActions\";\r\n\r\nconst loaderReducer = createReducer(false, {\r\n  [getContactsRequest]: () => true,\r\n  [getContactsSuccess]: () => false,\r\n  [getContactsError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [removeContactsRequest]: () => true,\r\n  [removeContactsSuccess]: () => false,\r\n  [removeContactsError]: () => false,\r\n});\r\n\r\nexport default loaderReducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { reducerContacts } from \"./contacts/contactsReducers\";\r\nimport errorReduccer from \"./error/errorReducer\";\r\nimport loaderReducer from \"./loader/loaderReduser\";\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: reducerContacts,\r\n  loader: loaderReducer,\r\n  error: errorReduccer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV !== \"production\", // => true || false\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__1Jwc9\",\"container\":\"ContactForm_container__1S-HR\",\"btn\":\"ContactForm_btn__1bCxx\"};"],"sourceRoot":""}